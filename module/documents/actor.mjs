/**
 * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.
 * @extends {Actor}
 */
export class cgdActor extends foundry.documents.Actor {
  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset (to clear active effects),
    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
    const actorData = this;
    const flags = actorData.flags.coriolistgd || {};
    this.system.maxPush ??= {};
    this.system.attributesBonus ??= {};
  }

  /**
   *
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic
   * approach is useful when you have actors & items that share a parent Document,
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return { ...super.getRollData(), ...(this.system.getRollData?.() ?? null) };
  }

  _replaceImgIfDefault(img) {
    return this.img == "icons/svg/mystery-man.svg" ? img : this.img;
  }
  _replaceTokenImgIfDefault(img) {
    return this.prototypeToken.texture.src == "icons/svg/mystery-man.svg" ? img : this.prototypeToken.texture.src;
  }
  _replaceActorLink(data, defaultValue) {
    return data.prototypeToken?.actorLink ?? defaultValue;
  }

  async _preCreate(data, options, user) {
    const allowed = await super._preCreate(data, options, user)
    if (allowed === false) return false;

    switch (data.type) {
      case "explorer":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/astronaut-helmet.svg"),
          prototypeToken: {
            actorLink: true,
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/astronaut-helmet.webp")
            }
          }
        });
        break;
      case "npc":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/npc.svg"),
          prototypeToken: {
            actorLink: this._replaceActorLink(data, false),
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/npc.webp")
            }
          }
        });
        break;
      case "creature":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/creature.svg"),
          prototypeToken: {
            actorLink: false,
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/creature.webp")
            }
          }
        });
        break;
      case "bird":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/egyptian-bird.svg"),
          ownership: { default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER },
          prototypeToken: {
            actorLink: true,
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/egyptian-bird.webp"),
            }
          }
        });
        break;
      case "crew":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/three-friends.svg"),
          ownership: { default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER },
          prototypeToken: {
            actorLink: true,
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/three-friends.webp"),
            }
          }
        });
        break;
      case "rover":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/apc.svg"),
          ownership: { default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER },
          prototypeToken: {
            actorLink: true,
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/apc.webp"),
            }
          }
        });
        break;
      case "shuttle":
        this.updateSource({
          img: this._replaceImgIfDefault("systems/coriolis-tgd/assets/icons/spaceship.svg"),
          ownership: { default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER },
          prototypeToken: {
            actorLink: true,
            disposition: 0,
            sight: {
              enabled: true
            },
            texture: {
              src: this._replaceTokenImgIfDefault("systems/coriolis-tgd/assets/icons/tokens/spaceship.webp"),
            }
          }
        });
        break;
      default:
        break;
    }
  }

  applyActiveEffects() {

    const overrides = {};
    this.statuses.clear();

    // Organize non-disabled effects by their application priority
    const changes = [];
    for (const effect of this.allApplicableEffects()) {
      if (!effect.active) continue;
      changes.push(...effect.changes.map(change => {
        const c = foundry.utils.deepClone(change);
        c.effect = effect;
        c.priority = c.priority ?? (c.mode * 10);
        return c;
      }));
      for (const statusId of effect.statuses) {
        this.statuses.add(statusId);
        const statusConfig = CONFIG.statusEffects.find(it => it.id == statusId);
        if (!statusConfig || !effect.origin)
          continue;

        changes.push(...statusConfig.changes.map(change => {
          const c = foundry.utils.deepClone(change);
          c.effect = effect;
          c.priority = c.priority ?? (c.mode * 10);
          return c;
        }))
      }
    }
    changes.sort((a, b) => a.priority - b.priority);

    // Apply all changes
    for (const change of changes) {
      if (!change.key) continue;
      const changes = change.effect.apply(this, change);
      Object.assign(overrides, changes);
    }

    // Expand the set of final overrides
    this.overrides = foundry.utils.expandObject(overrides);
  }

  getSupplyItem() {
    const supplyItem = this.items.filter(it => it.flags["coriolis-tgd"]?.isSupply)[0];
    return supplyItem;
  }

  get isBroken() {
    return (this.system.derivedAttributes?.health?.value ?? 1) == 0 ||
      (this.system.derivedAttributes?.hope?.value ?? 1) == 0 ||
      (this.system.derivedAttributes?.heart?.value ?? 1) == 0 ||
      (this.system.health?.value ?? 1) == 0;
  }
}
